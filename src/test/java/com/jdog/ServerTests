package com.jdog;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.assertTrue;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import java.time.Duration;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.logging.Logger;

import org.junit.Before;
import org.junit.Test;

import reactor.core.Scannable;
import reactor.core.publisher.Flux;
import reactor.core.scheduler.Scheduler;
import reactor.core.scheduler.Schedulers;
import reactor.netty.DisposableServer;
import reactor.test.StepVerifier;
import reactor.test.StepVerifier.Step;

public class ServerTests {
    
    Server s;
    
    @Before
    public void setup() {
        s = new Server();
    }
    
    @Test
    public void testtestout() {
        s.testout();
    }
    
    @Test
    public void testServer() throws UnknownHostException, IOException, InterruptedException {
        int testPort = 9000;
        DisposableServer server = s.startServer(testPort);
        
        System.out.println(server.isDisposed());
        Socket sock = new Socket("localhost", testPort);
        
        PrintWriter out = new PrintWriter(sock.getOutputStream(), true);
        out.println("hello world");
        
        Thread.sleep(1000000);
        sock.close();
    }
    
    @Test
    public void testLargeLine() throws UnknownHostException, IOException, InterruptedException {
        int testPort = 9000;
        DisposableServer server = s.startServer(testPort);
        
        System.out.println(server.isDisposed());
        Socket sock = new Socket("localhost", testPort);
        
        PrintWriter out = new PrintWriter(sock.getOutputStream(), true);
        
        // Flux.interval(Duration.ofMillis(100) ).take(Duration.ofSeconds(2))
        // .subscribe((i ) -> {
        // if(i%2 == 0) {
        out.println("hello there");
        // } else {
        out.println(
                "helloworldsapsdifjpaiejpafijsbpaisejpfiasjpijsepaifjpesiajfpioasdjfpaisjdfpaisjepfiajfpisaejfpaisf"
                        + "iopsajfpaisehucnasdiopajfpsiedfjdpeasijpeijfpasiefjpasdiufjbipasixcmpaisjd\ncpasjfpeifjapsoiejfpaismcpaisjfepajsp");
        Thread.sleep(1000);
        System.out.println("closed: " + sock.isClosed() + " connected: " + sock.isConnected()
                + " in shut down: " + sock.isInputShutdown() + " out shut down: "
                + sock.isOutputShutdown());
        out.println("hello there");
        
        // }
        // });
        
        Thread.sleep(30000);
        
    }
    
    @Test
    public void testServerjson() throws UnknownHostException, IOException, InterruptedException {
        int testPort = 9000;
        DisposableServer server = s.startServer(testPort);
        
        System.out.println(server.isDisposed());
        Socket sock = new Socket("localhost", testPort);
        
        PrintWriter out = new PrintWriter(sock.getOutputStream(), true);
        
        Flux.interval(Duration.ofNanos(200)).take(Duration.ofSeconds(2)).subscribe((i) -> {
            out.println("hello worlds");
        });
        
        Thread.sleep(1000);
        
    }
    
    @Test
    public void learninterval() throws InterruptedException {
        Flux.interval(Duration.ofMillis(2)).subscribe((i) -> System.out.println(i));
        Thread.sleep(5000);
    }
    
    @Test
    public void learningWindows() {
        Flux<Integer> myflux = Flux.just(1, 2, 3, 4, 5, 6);
        Step<Integer> step = StepVerifier.create(myflux).expectNext(1);
        
        // assertSequence(step, 2, 6).expectComplete().verify();
        
    }
    
    private Step<Integer> assertSequence(Step<Integer> verifier, int start, int length) {
        for (int i = start; i < start + length; i++) {
            int x = i;
            verifier = verifier.assertNext(num -> assertTrue(num == x));
        }
        return verifier;
    }
    
    class SequenceTCase {
        
        public SequenceTCase(String in, String expected) {
            this.input = in;
            this.expected = expected;
        }
        
        public String input;
        
        public String expected;
    }
    
    Flux<SequenceTCase> getSequence() {
        return Flux.fromArray(new SequenceTCase[] { new SequenceTCase("a", "ax"),
                
                new SequenceTCase("er", "erx"), new SequenceTCase("12837sdkfjjajsdea;sfas'fasf",
                        "12837sdkfjjajsdea;sfas'fasfx"), });
    }
    
    @Test
    public void learningTestSequence() {
        Flux<SequenceTCase> testCases = getSequence();
        
        Step<String> step = StepVerifier.create(testCases.map(tc -> tc.input).map(i -> i + "x"));
        List<String> expected = testCases.map(tc -> tc.expected).collectList().block();
        
        assertSequenceEquals(step, expected).expectComplete().verify();
    }
    
    private <T> Step<T> assertSequenceEquals(Step<T> verifier, List<T> expected) {
        for (int i = 0; i < expected.size(); i++) {
            int x = i;
            verifier = verifier.expectNextMatches(s -> s.equals(expected.get(x)));
        }
        return verifier;
    }
    
    Logger logger = Logger.getLogger("std");
    
    @Test
    public void testasync() throws FileNotFoundException, InterruptedException {
        PrintStream out = new PrintStream(new File("./output.log"));
        Flux.range(1, 10000).subscribeOn(Schedulers.parallel()).subscribe( i -> out.print(String.valueOf(i)));
        out.println("\nnext line");
        Thread.sleep(1000);
    }
    
}
